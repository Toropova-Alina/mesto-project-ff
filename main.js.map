{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-35\",\r\n  headers: {\r\n    authorization: \"a41432e8-69ac-46b8-801f-5c317f10c187\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Проверка результата запроса\r\nfunction checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n// Загрузка информации о пользователе с сервера\r\nexport function getUserInfo() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Загрузка карточек с сервера\r\nexport function getInitialCards() {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Редактирование профиля\r\nexport function editProfileApi(name, about) {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Добавление новой карточки\r\nexport function addCard(name, link) {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link,\r\n    }),\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Постановка лайка\r\nexport function likeCardApi(cardId) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Снятие лайка\r\nexport function unlikeCard(cardId) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Удаление карточки\r\nexport function deleteCardApi(cardId) {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n}\r\n\r\n// Обновление аватара пользователя\r\nexport function updateAvatarApi(avatarLink) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarLink,\r\n    }),\r\n  }).then(checkResponse);\r\n}\r\n","import {likeCardApi, unlikeCard, deleteCardApi} from \"./api.js\"\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(cardData, deleteCard, openImagePopup, likeCard, userId) {\r\n  const cardTemplate = document.querySelector(\"#card-template\").content;\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n\r\n  cardElement.querySelector(\".card__title\").textContent = cardData.name;\r\n  cardImage.src = cardData.link;\r\n  cardImage.alt = cardData.name;\r\n\r\n  cardImage.addEventListener(\"click\", () => {\r\n    openImagePopup(cardData.link, cardData.name);\r\n  });\r\n\r\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n  if (cardData.owner._id !== userId) {\r\n    deleteButton.remove();\r\n  } else {\r\n  deleteButton.addEventListener(\"click\", () => deleteCard(cardElement, cardData._id));\r\n  }\r\n\r\n  const likeButton = cardElement.querySelector(\".card__like-button\");\r\n  const likesCard = cardElement.querySelector(\".card__like-counter\");\r\n  const isLiked = cardData.likes.some(like => like._id === userId);\r\n  if (isLiked)  {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n  likesCard.textContent = cardData.likes.length;\r\n  likeButton.addEventListener(\"click\", () => likeCard(likeButton, cardData._id, likesCard));\r\n\r\n  return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\nexport function deleteCard(cardElement, cardId) {\r\n  deleteCardApi(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Ошибка при удалении карточки:\", err);\r\n    });\r\n}\r\n\r\n// Функция обработки лайка\r\nexport function likeCard(likeButton, cardID, likesCard) {\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n  const likeRequest = isLiked ? unlikeCard : likeCardApi;\r\n  likeRequest(cardID)\r\n    .then((data) => {\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n      likesCard.textContent = data.likes.length;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Ошибка при лайке/дизлайке карточки:\", err);\r\n    });\r\n}\r\n","// Функция открытия модального окна\r\nexport function openPopup(popup) {\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", handleCloseByEsc);\r\n}\r\n// Функция закрытия модального окна\r\nexport function closePopup(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", handleCloseByEsc);\r\n}\r\n\r\n// Колбэк закрытие по ESC\r\nfunction handleCloseByEsc(e) {\r\n  if (e.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    closePopup(openedPopup);\r\n  }\r\n}\r\n\r\n// Обработка закрытия\r\nexport function setCloseModalByClickListeners(popupList) {\r\n  popupList.forEach((popup) => {\r\n    // По крестику\r\n    const close = popup.querySelector(\".popup__close\");\r\n    close.addEventListener(\"click\", () => closePopup(popup));\r\n\r\n    // По клику вне контента\r\n    popup.addEventListener(\"click\", (e) => {\r\n      if (e.target === popup) closePopup(popup);\r\n    });\r\n  });\r\n}\r\n","// Функция показа ошибки\r\nconst showInputError = (formElement, inputElement, errorMessage, settings) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\r\n  inputElement.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n};\r\n\r\n// Функция скрытия ошибки\r\nconst hideInputError = (formElement, inputElement, settings) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\r\n  inputElement.classList.remove(settings.inputErrorClass);\r\n  errorElement.classList.remove(settings.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Проверка валидности поля\r\nconst isValid = (formElement, inputElement, settings) => {\r\n  if (inputElement.validity.valueMissing) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      \"Вы пропустили это поле\",\r\n      settings\r\n    );\r\n  } else if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.dataset.errorMessage,\r\n      settings\r\n    );\r\n  } else if (inputElement.validity.typeMismatch) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.dataset.errorMessage,\r\n      settings\r\n    );\r\n  } else if (inputElement.validity.tooShort) {\r\n    const minLength = inputElement.minLength;\r\n    const currentLength = inputElement.value.length;\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      `Минимальное количество символов: ${minLength}. Длина текста сейчас: ${currentLength} символов`,\r\n      settings\r\n    );\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n    hideInputError(formElement, inputElement, settings);\r\n  }\r\n};\r\n\r\nconst addInactiveButtenClass = (element, settings) => {\r\n  element.classList.add(settings.inactiveButtonClass);\r\n};\r\n\r\n// Переключение состояния кнопки\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\nconst toggleButtonState = (inputList, buttonElement, settings) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    addInactiveButtenClass(buttonElement, settings);\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(settings.inactiveButtonClass);\r\n  }\r\n};\r\n\r\n// Установка слушателей событий\r\nconst setEventListeners = (formElement, settings) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, settings);\r\n      toggleButtonState(inputList, buttonElement, settings);\r\n    });\r\n  });\r\n};\r\n\r\n// Включение валидации всех форм\r\nexport const enableValidation = (settings) => {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, settings);\r\n  });\r\n};\r\n\r\n// Очистка ошибок валидации\r\nexport const clearValidation = (profileForm, settings) => {\r\n  const inputList = Array.from(\r\n    profileForm.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = profileForm.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(profileForm, inputElement, settings);\r\n  });\r\n  addInactiveButtenClass(buttonElement, settings);\r\n  buttonElement.disabled = true;\r\n};\r\n","import \"../pages/index.css\"; // Импорт главного файла стилей\r\nimport { createCard, deleteCard, likeCard } from \"../components/card.js\";\r\nimport {\r\n  openPopup,\r\n  closePopup,\r\n  setCloseModalByClickListeners,\r\n} from \"../components/modal.js\";\r\nimport { enableValidation, clearValidation } from \"../components/validation.js\";\r\nimport {\r\n  getUserInfo,\r\n  getInitialCards,\r\n  editProfileApi,\r\n  addCard,\r\n  updateAvatarApi\r\n} from \"../components/api.js\";\r\n\r\n// Основные константы\r\nconst editPopup = document.querySelector(\".popup_type_edit\"); // Модальное окно редактирования профиля\r\nconst newCardPopup = document.querySelector(\".popup_type_new-card\"); // Модальное окно добавления карточки\r\nconst imagePopup = document.querySelector(\".popup_type_image\"); // Модальное окно открытия картинки на весь экран\r\nconst avatarPopup = document.querySelector(\".popup_type_avatar\"); // Модальное окно обнавления аватара пользователя\r\nconst allPopup = document.querySelectorAll(\".popup\"); // Все модальные окна\r\n\r\nconst profileName = document.querySelector(\".profile__title\"); // Имя профиля\r\nconst profileDescription = document.querySelector(\".profile__description\"); // Описание профиля\r\nconst profileAvatar = document.querySelector(\".profile__image\"); // Аватар профиля\r\nconst profileForm = document.querySelector('form[name=\"edit-profile\"]'); // Форма изменения данных профиля\r\nconst nameInput = editPopup.querySelector(\".popup__input_type_name\"); // Имя профиля при открытии формы редактирования профиля\r\nconst descriptionInput = editPopup.querySelector(\r\n  \".popup__input_type_description\"\r\n); // Описание профиля при открытии формы редактирования профиля\r\nconst editButton = document.querySelector(\".profile__edit-button\"); // Кнопка редактирования профиля\r\n\r\nconst addButton = document.querySelector(\".profile__add-button\"); // Кнопка добавления новой карточки\r\nconst newCardForm = document.querySelector('form[name=\"new-place\"]'); // Форма добавления новой карточки\r\nconst cardNameInput = newCardForm.querySelector(\".popup__input_type_card-name\"); // Название новой карточки\r\nconst cardLinkInput = newCardForm.querySelector(\".popup__input_type_url\"); // ССылка на картинку новой карточки\r\nconst cardsContainer = document.querySelector(\".places__list\"); // Все карточки\r\nconst popupImage = imagePopup.querySelector(\".popup__image\"); // Картинка, выводящаяся на весь экран\r\nconst popupImageCaption = imagePopup.querySelector(\".popup__caption\"); // Подпись к картинке\r\n\r\nconst avatarInput = avatarPopup.querySelector(\".popup__input_type_url\"); // Ссылка на аватар\r\nconst avatarForm = document.querySelector('.popup__form[name=\"avatar\"]'); // Форма редактирования аватара\r\n\r\nlet userId; // ID пользователя\r\n// Конфигурация валидации\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\n// Функция открытия модального окна редактирования профиля\r\nfunction editProfile() {\r\n  nameInput.value = profileName.textContent;\r\n  descriptionInput.value = profileDescription.textContent;\r\n  openPopup(editPopup);\r\n  clearValidation(profileForm, validationConfig);\r\n}\r\n\r\nfunction renderLoading(button, isLoading) {\r\n  const initialText = button.textContent;\r\n  const loadingText = \"Сохранение...\";\r\n  if (isLoading) {\r\n    button.textContent = loadingText;\r\n  } else {\r\n    button.textContent = initialText;\r\n  }\r\n}\r\n\r\n// Функция обработки отправки формы изменения профиля\r\nfunction handleProfileSubmit(evt) {\r\n  evt.preventDefault();\r\n\r\n  renderLoading(editButton, true);\r\n\r\n  editProfileApi(nameInput.value, descriptionInput.value)\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileDescription.textContent = data.about;\r\n      closePopup(editPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Ошибка при редактировании профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(editButton, false);\r\n      clearValidation(profileForm, validationConfig);\r\n    });\r\n}\r\n\r\n// Функция обработки формы добавления карточки\r\nfunction handleNewCardSubmit(evt) {\r\n  evt.preventDefault();\r\n  renderLoading(addButton, true);\r\n\r\n  addCard(cardNameInput.value, cardLinkInput.value)\r\n    .then((newCard) => {\r\n      const card = createCard(newCard, deleteCard, openImagePopup, likeCard, userId);\r\n      cardsContainer.prepend(card);\r\n      closePopup(newCardPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(addButton, false);\r\n      clearValidation(newCardForm, validationConfig);\r\n    });\r\n}\r\n\r\n// Обработчик отправки формы редактирования аватара\r\nfunction handleAvatarSubmit(evt) {\r\n  evt.preventDefault();\r\n  updateAvatarApi(avatarInput.value)\r\n    .then((userData) => {\r\n      profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n      closePopup(avatarPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Ошибка при обновлении аватара:\", err);\r\n    })\r\n    .finally(() => {\r\n      clearValidation(avatarForm, validationConfig);\r\n    });\r\n}\r\n\r\n// Функция открытия картинки на весь экран\r\nexport function openImagePopup(imageLink, imageName) {\r\n  popupImage.src = imageLink;\r\n  popupImage.alt = imageName;\r\n  popupImageCaption.textContent = imageName;\r\n  openPopup(imagePopup);\r\n}\r\n\r\n// Функция открытия модального окна аватара\r\nfunction updateAvatar() {\r\n  avatarInput.value = profileAvatar.style.backgroundImage;\r\n  openPopup(avatarPopup);\r\n  clearValidation(avatarForm, validationConfig);\r\n}\r\n\r\n// Загрузка данных пользователя и карточек\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    profileName.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    userId = userData._id;\r\n    profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n    cards.forEach((cardData) => {\r\n      const card = createCard(\r\n        cardData,\r\n        deleteCard,\r\n        openImagePopup,\r\n        likeCard,\r\n        userId\r\n      );\r\n      cardsContainer.append(card);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка при загрузке данных:\", err);\r\n  });\r\n\r\n// Включение валидации всех форм\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  enableValidation(validationConfig);\r\n});\r\n\r\n// Модальное окно обновления аватара\r\nprofileAvatar.addEventListener(\"click\", updateAvatar);\r\navatarForm.addEventListener(\"submit\", handleAvatarSubmit); // Обработка отправки формы изменения аватара\r\n\r\n// Модальное окно редактирования профиля\r\neditButton.addEventListener(\"click\", editProfile);\r\n\r\n// Модальное окно добавления карточки\r\naddButton.addEventListener(\"click\", function () {\r\n  openPopup(newCardPopup);\r\n  clearValidation(newCardForm, validationConfig);\r\n  newCardForm.reset();\r\n});\r\n\r\nsetCloseModalByClickListeners(allPopup); // Обработка закрытия модальных окон\r\nprofileForm.addEventListener(\"submit\", handleProfileSubmit); // Обработка отправки формы изменения профиля\r\nnewCardForm.addEventListener(\"submit\", handleNewCardSubmit); // Обработка отправки формы создания новой карточки\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","likeCardApi","cardId","fetch","method","then","unlikeCard","createCard","cardData","deleteCard","openImagePopup","likeCard","userId","cardElement","document","querySelector","content","cloneNode","cardImage","textContent","name","src","link","alt","addEventListener","deleteButton","owner","_id","remove","likeButton","likesCard","likes","some","like","classList","add","length","deleteCardApi","catch","err","console","log","cardID","contains","data","toggle","openPopup","popup","handleCloseByEsc","closePopup","removeEventListener","e","key","showInputError","formElement","inputElement","errorMessage","settings","errorElement","inputErrorClass","errorClass","hideInputError","addInactiveButtenClass","element","inactiveButtonClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","clearValidation","profileForm","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","editPopup","newCardPopup","imagePopup","avatarPopup","allPopup","profileName","profileDescription","profileAvatar","nameInput","descriptionInput","editButton","addButton","newCardForm","cardNameInput","cardLinkInput","cardsContainer","popupImage","popupImageCaption","avatarInput","avatarForm","validationConfig","formSelector","renderLoading","button","isLoading","initialText","imageLink","imageName","all","_ref","_ref2","userData","cards","about","style","backgroundImage","avatar","card","append","valueMissing","patternMismatch","setCustomValidity","dataset","typeMismatch","tooShort","minLength","currentLength","value","isValid","setEventListeners","evt","avatarLink","preventDefault","body","JSON","stringify","finally","reset","target","newCard","prepend"],"sourceRoot":""}